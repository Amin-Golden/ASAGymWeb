@page "/attendance"
@using Gym.Web.Services
@using Gym.Web.Models
@inject IAttendanceService AttendanceService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Attendance - ASA Gym Management</PageTitle>

<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="h3 mb-0">
                <i class="fas fa-calendar-check me-2"></i>
                Attendance Tracking
            </h1>
            <p class="text-muted">Track client attendance and session records</p>
        </div>
        <button class="btn btn-primary" @onclick="AddAttendance">
            <i class="fas fa-plus me-2"></i>
            Record Attendance
        </button>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-4">
        <div class="input-group">
            <span class="input-group-text">
                <i class="fas fa-calendar"></i>
            </span>
            <input type="date" class="form-control" value="@selectedDate.ToString("yyyy-MM-dd")" @onchange="OnDateChange" />
        </div>
    </div>
    <div class="col-md-4">
        <div class="input-group">
            <span class="input-group-text">
                <i class="fas fa-search"></i>
            </span>
            <input type="text" class="form-control" placeholder="Search by client name..." @bind="searchTerm" @oninput="OnSearch" />
        </div>
    </div>
    <div class="col-md-4">
        <div class="d-flex gap-2">
            <button class="btn btn-outline-primary" @onclick="RefreshData">
                <i class="fas fa-sync-alt me-2"></i>
                Refresh
            </button>
            <button class="btn btn-outline-success" @onclick="ExportAttendance">
                <i class="fas fa-download me-2"></i>
                Export
            </button>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading attendance records...</p>
    </div>
}
else
{
    <div class="card">
        <div class="card-body">
            @if (attendances.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Client</th>
                                <th>Session</th>
                                <th>Instructor</th>
                                <th>Date</th>
                                <th>Status</th>
                                <th>Description</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var attendance in attendances)
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            @if (!string.IsNullOrEmpty(attendance.Client.ImagePath))
                                            {
                                                <img src="@attendance.Client.ImagePath" class="rounded-circle me-2" width="32" height="32" alt="Client photo" />
                                            }
                                            else
                                            {
                                                <div class="bg-primary rounded-circle me-2 d-flex align-items-center justify-content-center" style="width: 32px; height: 32px;">
                                                    <i class="fas fa-user text-white"></i>
                                                </div>
                                            }
                                            <div>
                                                <div class="fw-bold">@attendance.Client.FirstName @attendance.Client.LastName</div>
                                                <small class="text-muted">@attendance.Client.PhoneNumber</small>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="fw-bold">@attendance.Session.DestinationDate.ToString("MMM dd, yyyy")</div>
                                        <small class="text-muted">@attendance.Session.DestinationDate.ToString("HH:mm")</small>
                                    </td>
                                    <td>
                                        <div class="fw-bold">@attendance.Session.Instructor.FirstName @attendance.Session.Instructor.LastName</div>
                                        <small class="text-muted">@attendance.Session.Instructor.Title</small>
                                    </td>
                                    <td>@attendance.CreatedAt.ToString("MMM dd, yyyy")</td>
                                    <td>
                                        @if (attendance.Session.IsAttended)
                                        {
                                            <span class="badge bg-success">Attended</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">Absent</span>
                                        }
                                    </td>
                                    <td>@(attendance.Description ?? "N/A")</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewAttendance(attendance.Id)" title="View">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-warning" @onclick="() => EditAttendance(attendance.Id)" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteAttendance(attendance.Id)" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-calendar-check fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">No attendance records found</h5>
                    <p class="text-muted">Start by recording your first attendance</p>
                    <button class="btn btn-primary" @onclick="AddAttendance">
                        <i class="fas fa-plus me-2"></i>
                        Record First Attendance
                    </button>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<Gym.Web.Models.Attendance> attendances = new();
    private bool isLoading = true;
    private DateTime selectedDate = DateTime.Today;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAttendance();
    }

    private async Task LoadAttendance()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var startDate = selectedDate.Date;
            var endDate = selectedDate.Date.AddDays(1);
            
            attendances = (await AttendanceService.GetAttendancesByDateRangeAsync(startDate, endDate)).ToList();
            
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                attendances = attendances.Where(a => 
                    a.Client.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    a.Client.LastName!.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                ).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading attendance: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnDateChange(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out DateTime newDate))
        {
            selectedDate = newDate;
        }
        await LoadAttendance();
    }

    private async Task OnSearch(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        await LoadAttendance();
    }

    private async Task RefreshData()
    {
        await LoadAttendance();
    }

    private void AddAttendance()
    {
        Navigation.NavigateTo("/attendance/add");
    }

    private void ViewAttendance(long attendanceId)
    {
        Navigation.NavigateTo($"/attendance/{attendanceId}");
    }

    private void EditAttendance(long attendanceId)
    {
        Navigation.NavigateTo($"/attendance/{attendanceId}/edit");
    }

    private async Task DeleteAttendance(long attendanceId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this attendance record?");
        if (confirmed)
        {
            await AttendanceService.DeleteAttendanceAsync(attendanceId);
            await LoadAttendance();
        }
    }

    private async Task ExportAttendance()
    {
        await JSRuntime.InvokeVoidAsync("exportToCSV", attendances, "attendance.csv");
    }
}
