@page "/instructors"
@using Gym.Web.Services
@using Gym.Web.Models
@using Microsoft.JSInterop
@inject IInstructorService InstructorService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Instructors - ASA Gym Management</PageTitle>

<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="h3 mb-0">
                <i class="fas fa-user-tie me-2"></i>
                Instructors
            </h1>
            <p class="text-muted">Manage gym instructors and trainers</p>
        </div>
        <button class="btn btn-primary" @onclick="AddInstructor">
            <i class="fas fa-plus me-2"></i>
            Add New Instructor
        </button>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="input-group">
            <span class="input-group-text">
                <i class="fas fa-search"></i>
            </span>
            <input type="text" class="form-control" placeholder="Search instructors..." @bind="searchTerm" @oninput="OnSearch" />
        </div>
    </div>
    <div class="col-md-6">
        <div class="d-flex gap-2">
            <button class="btn btn-outline-primary" @onclick="RefreshData">
                <i class="fas fa-sync-alt me-2"></i>
                Refresh
            </button>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading instructors...</p>
    </div>
}
else
{
    <div class="row">
        @foreach (var instructor in instructors)
        {
            <div class="col-md-4 mb-4">
                <div class="card instructor-card h-100">
                    <div class="card-body text-center">
                        @if (!string.IsNullOrEmpty(instructor.ImagePath))
                        {
                            <img src="@instructor.ImagePath" class="rounded-circle mb-3" width="100" height="100" alt="Instructor photo" style="object-fit: cover;">
                        }
                        else
                        {
                            <div class="bg-primary rounded-circle mx-auto mb-3 d-flex align-items-center justify-content-center" style="width: 100px; height: 100px;">
                                <i class="fas fa-user-tie fa-2x text-white"></i>
                            </div>
                        }
                        
                        <h5 class="card-title">@instructor.FirstName @instructor.LastName</h5>
                        <p class="text-muted">@instructor.Title</p>
                        
                        <div class="row mb-3">
                            <div class="col-6">
                                <small class="text-muted">Phone</small>
                                <div class="fw-bold">@instructor.PhoneNumber</div>
                            </div>
                            <div class="col-6">
                                <small class="text-muted">Salary</small>
                                <div class="fw-bold">$@instructor.Salary.ToString("N0")</div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <small class="text-muted">Package</small>
                            <div class="fw-bold">@instructor.Package.PackageName</div>
                        </div>
                        
                        <div class="mb-3">
                            <small class="text-muted">Members</small>
                            <div class="fw-bold">@instructor.Memberships.Count</div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(instructor.Description))
                        {
                            <p class="card-text text-muted small">@instructor.Description</p>
                        }
                        
                        <div class="btn-group w-100" role="group">
                            <button class="btn btn-outline-primary btn-sm" @onclick="() => ViewInstructor(instructor.Id)">
                                <i class="fas fa-eye me-1"></i>
                                View
                            </button>
                            <button class="btn btn-outline-warning btn-sm" @onclick="() => EditInstructor(instructor.Id)">
                                <i class="fas fa-edit me-1"></i>
                                Edit
                            </button>
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteInstructor(instructor.Id)">
                                <i class="fas fa-trash me-1"></i>
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (!instructors.Any())
    {
        <div class="text-center py-5">
            <i class="fas fa-user-tie fa-3x text-muted mb-3"></i>
            <h5 class="text-muted">No instructors found</h5>
            <p class="text-muted">Start by adding your first instructor</p>
            <button class="btn btn-primary" @onclick="AddInstructor">
                <i class="fas fa-plus me-2"></i>
                Add First Instructor
            </button>
        </div>
    }
}

@code {
    private List<Instructor> instructors = new();
    private bool isLoading = true;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadInstructors();
    }

    private async Task LoadInstructors()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            if (string.IsNullOrWhiteSpace(searchTerm))
            {
                instructors = (await InstructorService.GetAllInstructorsAsync()).ToList();
            }
            else
            {
                instructors = (await InstructorService.SearchInstructorsAsync(searchTerm)).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading instructors: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnSearch(ChangeEventArgs e)
    {
        await LoadInstructors();
    }

    private async Task RefreshData()
    {
        await LoadInstructors();
    }

    private void AddInstructor()
    {
        Navigation.NavigateTo("/instructors/add");
    }

    private void ViewInstructor(long instructorId)
    {
        Navigation.NavigateTo($"/instructors/{instructorId}");
    }

    private void EditInstructor(long instructorId)
    {
        Navigation.NavigateTo($"/instructors/{instructorId}/edit");
    }

    private async Task DeleteInstructor(long instructorId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this instructor?");
        if (confirmed)
        {
            await InstructorService.DeleteInstructorAsync(instructorId);
            await LoadInstructors();
        }
    }
}
