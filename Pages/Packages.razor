@page "/packages"
@using Gym.Web.Services
@using Gym.Web.Models
@using Microsoft.JSInterop
@inject IPackageService PackageService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Packages - ASA Gym Management</PageTitle>

<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="h3 mb-0">
                <i class="fas fa-box me-2"></i>
                Packages
            </h1>
            <p class="text-muted">Manage gym packages and pricing</p>
        </div>
        <button class="btn btn-primary" @onclick="AddPackage">
            <i class="fas fa-plus me-2"></i>
            Add New Package
        </button>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="input-group">
            <span class="input-group-text">
                <i class="fas fa-search"></i>
            </span>
            <input type="text" class="form-control" placeholder="Search packages..." @bind="searchTerm" @oninput="OnSearch" />
        </div>
    </div>
    <div class="col-md-6">
        <div class="d-flex gap-2">
            <button class="btn btn-outline-primary" @onclick="RefreshData">
                <i class="fas fa-sync-alt me-2"></i>
                Refresh
            </button>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading packages...</p>
    </div>
}
else
{
    <div class="row">
        @foreach (var package in packages)
        {
            <div class="col-md-4 mb-4">
                <div class="card package-card h-100">
                    @if (!string.IsNullOrEmpty(package.ImagePath))
                    {
                        <img src="@package.ImagePath" class="card-img-top" alt="@package.PackageName" style="height: 200px; object-fit: cover;">
                    }
                    else
                    {
                        <div class="card-img-top bg-primary d-flex align-items-center justify-content-center" style="height: 200px;">
                            <i class="fas fa-dumbbell fa-3x text-white"></i>
                        </div>
                    }
                    
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@package.PackageName</h5>
                        <p class="card-text text-muted">@package.Description</p>
                        
                        <div class="mt-auto">
                            <div class="row mb-3">
                                <div class="col-6">
                                    <small class="text-muted">Duration</small>
                                    <div class="fw-bold">@package.Duration</div>
                                </div>
                                <div class="col-6">
                                    <small class="text-muted">Days</small>
                                    <div class="fw-bold">@package.Days days</div>
                                </div>
                            </div>
                            
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <div>
                                    <small class="text-muted">Price</small>
                                    <div class="h4 text-primary mb-0">$@package.Price.ToString("N0")</div>
                                </div>
                                <div>
                                    <small class="text-muted">Members</small>
                                    <div class="fw-bold">@package.Memberships.Count</div>
                                </div>
                            </div>
                            
                            <div class="btn-group w-100" role="group">
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => ViewPackage(package.Id)">
                                    <i class="fas fa-eye me-1"></i>
                                    View
                                </button>
                                <button class="btn btn-outline-warning btn-sm" @onclick="() => EditPackage(package.Id)">
                                    <i class="fas fa-edit me-1"></i>
                                    Edit
                                </button>
                                <button class="btn btn-outline-danger btn-sm" @onclick="() => DeletePackage(package.Id)">
                                    <i class="fas fa-trash me-1"></i>
                                    Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (!packages.Any())
    {
        <div class="text-center py-5">
            <i class="fas fa-box fa-3x text-muted mb-3"></i>
            <h5 class="text-muted">No packages found</h5>
            <p class="text-muted">Start by creating your first package</p>
            <button class="btn btn-primary" @onclick="AddPackage">
                <i class="fas fa-plus me-2"></i>
                Create First Package
            </button>
        </div>
    }
}

@code {
    private List<Package> packages = new();
    private bool isLoading = true;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadPackages();
    }

    private async Task LoadPackages()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            if (string.IsNullOrWhiteSpace(searchTerm))
            {
                packages = (await PackageService.GetAllPackagesAsync()).ToList();
            }
            else
            {
                packages = (await PackageService.SearchPackagesAsync(searchTerm)).ToList();
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading packages: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnSearch(ChangeEventArgs e)
    {
        await LoadPackages();
    }

    private async Task RefreshData()
    {
        await LoadPackages();
    }

    private void AddPackage()
    {
        Navigation.NavigateTo("/packages/add");
    }

    private void ViewPackage(long packageId)
    {
        Navigation.NavigateTo($"/packages/{packageId}");
    }

    private void EditPackage(long packageId)
    {
        Navigation.NavigateTo($"/packages/{packageId}/edit");
    }

    private async Task DeletePackage(long packageId)
    {
        // Implement delete confirmation and logic
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this package?");
        if (confirmed)
        {
            await PackageService.DeletePackageAsync(packageId);
            await LoadPackages();
        }
    }
}
